在本地创建一个git仓库:
1. 创建一个空的目录
2. 进入到空目录里面
3. 通过git init命令把这个目录变成Git可以管理的仓库:
4. 此时空的文件夹里面就会有隐藏的文件.git.这个文件是来跟踪管理版本库的
注意:所有的版本控制系统,其实只能跟踪文本文件的改动,比如txt\网页\程序等.版本控制系统可以告诉你每次的改动.但是图片\视频这些二进制文件是无法进行跟踪的,只能知道大小的改变,还有就是word是二进制文件,版本控制系统是无法进行版本控制的.
把文件添加到版本库
1. 创建一个文件(readme.txt),必须在git仓库下面,仓库下面的子目录也是可以的
2. 第一步:git add readme.txt(告诉git,把文件添加到仓库)
3. 第二步:git commit -m "this is change file describe"
(-m后面需要填写这次修改文件的描述.第一次的时候需要一些配置
git config --global user.name "your name"
git config --global user.email "your email"
)
//为什么git添加文件需要add和commit,因为commit可以一次提交很多文件,所以你可以多次add不同的文件




git中的版本回退
当我们多次对一个文件进行提交的时候,可以将文件回退到某一个修改的时间段上.
我们可以使用git log来查看我们修改的记录
如果展示的log太多,我们可以使用git log --pretty=oneline(git log显示从最近到最远的提交日志)
我们会在日志中看见前面很大的数字,那个是我们提交的版本号
在Git中,HEAD表示的是当前的版本,也就是最近提交的,上一个版本就是HEAD^,上上一个版本就是HEAD^^.假如回退前面100个版本,可以这样写HEAD~100
现在开始版本的回退:git reset --hard HEAD^
版本的复原:git reset --hard 提交的版本号前面几位(git reset --hard 1024e)
可以使用git reflog(该命令是用来记录你的每一次命令的)




工作区和暂存区
Git和其他版本控制系统的一个不同之处就是有了暂存区的概念
工作区:工作区就是我们电脑里面可以看见的文件,比如我们的learngit
版本库:工作区有一个隐藏文件.git,这个不算工作区,是一个版本库
Git的版本库里面有很多的东西,其中最重要的是stage(或者叫index)的暂存区,还有Git为我们自动创建的分支master,以及指向master的一个指针HEAD
前面我们讲Git添加文件需要两步:
第一步:git add ,把文件添加进去,也就是将文件添加到暂存区.
第二步:git commit,提交更改,实际上就是吧暂存区的文件提交到当前的分支中.
我们可以使用git status来查看状态.
当我们将文件添加到暂存区的时候,想要退回工作区:
git reset HEAD <file name>




管理修改
我们修改文件,执行git add进行提交,然后对文件进行再次的修改,然后进行提交.
使用git diff HEAD -- <file name>发现版本库中的文件和工作区中的文件不一致,说明此时此地次修改没有提交成功.我们班可以再次使用git add和git commit.也可以在第一次修改后git add,然后修改文件,再次的git add,然后提交就可以.


删除管理
1. 我们删除了工作区的文件之后,使用git status就可以看见说一个文件被删除.我们可以使用git rm <file name>来删除版本库中文件,然后进行提交就可以
2. 如果我们误删了工作区中的文件,我们可以使用git checkout -- <file name>来回复文件.git checkout其实是用版本库里的版本替换工作区的版本,无论工作区的文件删除还是修改都是可以进行还原的.

