### 在本地创建一个git仓库:
1. 创建一个空的目录
2. 进入到空目录里面
3. 通过git init命令把这个目录变成Git可以管理的仓库:
4. 此时空的文件夹里面就会有隐藏的文件.git.这个文件是来跟踪管理版本库的
注意:所有的版本控制系统,其实只能跟踪文本文件的改动,比如txt\网页\程序等.版本控制系统可以告诉你每次的改动.但是图片\视频这些二进制文件是无法进行跟踪的,只能知道大小的改变,还有就是word是二进制文件,版本控制系统是无法进行版本控制的.
把文件添加到版本库
1. 创建一个文件(readme.txt),必须在git仓库下面,仓库下面的子目录也是可以的
2. 第一步:git add readme.txt(告诉git,把文件添加到仓库)
3. 第二步:git commit -m "this is change file describe"
(-m后面需要填写这次修改文件的描述.第一次的时候需要一些配置
git config --global user.name "your name"
git config --global user.email "your email"
)
//为什么git添加文件需要add和commit,因为commit可以一次提交很多文件,所以你可以多次add不同的文件,后面会有详细说明




git中的版本回退
当我们多次对一个文件进行提交的时候,可以将文件回退到某一个修改的时间段上.
我们可以使用git log来查看我们修改的记录
如果展示的log太多,我们可以使用git log --pretty=oneline(git log显示从最近到最远的提交日志)
我们会在日志中看见前面很大的数字,那个是我们提交的版本号
在Git中,HEAD表示的是当前的版本,也就是最近提交的,上一个版本就是HEAD^,上上一个版本就是HEAD^^.假如回退前面100个版本,可以这样写HEAD~100
现在开始版本的回退:git reset --hard HEAD^
版本的复原:git reset --hard 提交的版本号前面几位(git reset --hard 1024e)
可以使用git reflog(该命令是用来记录你的每一次命令的)




工作区和暂存区
Git和其他版本控制系统的一个不同之处就是有了暂存区的概念
工作区:工作区就是我们电脑里面可以看见的文件,比如我们的learngit
版本库:工作区有一个隐藏文件.git,这个不算工作区,是一个版本库
Git的版本库里面有很多的东西,其中最重要的是stage(或者叫index)的暂存区,还有Git为我们自动创建的分支master,以及指向master的一个指针HEAD
前面我们讲Git添加文件需要两步:
第一步:git add ,把文件添加进去,也就是将文件添加到暂存区.
第二步:git commit,提交更改,实际上就是吧暂存区的文件提交到当前的分支中.
我们可以使用git status来查看状态.
当我们将文件添加到暂存区的时候,想要退回工作区:
git reset HEAD <file name>




管理修改
我们修改文件,执行git add进行提交,然后对文件进行再次的修改,然后进行提交.
使用git diff HEAD -- <file name>发现版本库中的文件和工作区中的文件不一致,说明此时此地次修改没有提交成功.我们班可以再次使用git add和git commit.也可以在第一次修改后git add,然后修改文件,再次的git add,然后提交就可以.


删除管理
1. 我们删除了工作区的文件之后,使用git status就可以看见说一个文件被删除.我们可以使用git rm <file name>来删除版本库中文件,然后进行提交就可以
2. 如果我们误删了工作区中的文件,我们可以使用git checkout -- <file name>来回复文件.git checkout其实是用版本库里的版本替换工作区的版本,无论工作区的文件删除还是修改都是可以进行还原的.




添加远程库
在github上添加一个仓库(仓库名为learngit),目前在github上这个仓库是空的.
在本地的仓库下运行:git remote add origin git@github.com:sunLookin/learngit.git
这里的sunLookin是自己的Github账户名.
然后执行git push -u origin master(把本地库的内容推送到远程库)
git push实际上是把当前分支master推送到远程(我们第一次推送master分支时,加上-u参数,Git不但会把本地的master分支内容推送到远程新的master分支,还会把本地的master分支和远程的master分支关联起来,在以后的推送或者拉取时就可以简化命令)
所以在往后的提交,就只需要git push origin master
注意:在此出现的一些问题:
1. SSH警告:这是因为Git使用ssh链接,而SSH链接在第一次验证Github服务器的Key时,需要你确认Github的Kry的指纹信息是否来自Github服务器,输入yes就行.
2. 公钥问题.
执行 cd ~./ssh
查看是否有id_rsa.pub和id_rsa文件存在,如果不存在,执行第三步,如果有,直接执行第4步
3. ssh-keygen -t rsa -C "your Github name"(-t指定密钥类型,默认是rsa,-C设置注释文字,-f指定密钥文件储存的文件名)
4. 其中id_rsa.pub里面就是公钥,将其拷贝到github的setting中的SSH KEY中即可.
5. 验证,在终端输入ssh -T git@github.com(出现
Hi username! You've successfully authenticated, but GitHub does not provide shell access则成功,就可以push本地的仓库到github的仓库了)


从远程克隆
git clone git@github.com:sunLookin/project.git


创建与合并分支
在Git中,有一条主分支,master.HEAD严格来说不是指向提交,而是指向master,master才是指向提交的,所以,HEAD指向的就是当前的分支
每次提交,master分支都会向前进行移动,这样,不断的进行提交,master分支的线也会越来越长.
当我们创建新的分支的时候,例如dev,Git新建了一个指针叫dev,指向master相同的提交,再把HEAD指向dev,就表示当前的分支在dev上.
不过,从现在开始,对工作区的修改和提交就是针对dev分支了,比如提交一次后,dev指针往前移动一步,而master不变.
假如我们在dev上的工作完成了,就可以把dev合并到master上,git怎么进行合并?最简单的方法,讲master指向dev的当前提交,就完成合并.
合并完成后,就可以删除dev分支了,删除dev分支就是吧dev指针删除,删除掉后,就剩master.
查看分支:git branch 
创建分支:git branch <name>
切换分支:git checkout <name>
创建+切换分支:git checkout -b <name>
合并某分支到当前分支:git merge <name>
删除分支:git branch -d <name>
<name>指的是分支的名字



分支管理策略
通常情况下,合并分支时,如果可能,Git会用fast forward模式,但这种情况下,删除分支后,会丢掉分支信息.
如果要强制禁止Fast forward模式,Git就会在Merge时生成一个新的commit,这样,从分支历史上就可以看出分支信息.--no--ff
1. 创建一个新的分支(git checkout -b foo)
2. 修改新的分支中的某个文件,然后进行add和commit
3. 切换到master分支上(git checkout master),我们进行合并
4. 使用git megre --no--ff -m "describe message"
(因为本次的合并要创建一个新的commit,所以加上-m参数,把描述写进去)
5. 使用git log --graph --pretty-oneline --abbrev-commit查看分支历史
分支策略:
在实际的开发中,我们应该按照几个基本原则进行分支管理
1. master分支应该保持稳定,也就是用来发布新版本,平时不应该在上面进行修改
2. 干活都应该放在其他的分支上面,也就是说其他的分支是不稳定的,需要发布版本的时候,再把其他分支合并到master上.


bug分支
假设我们突然想修改一个master分支上的bug,但是我们的dev分支任务没有完成,怎么处理?
1. 我们在dev分支下面将我们的东西储存起来,使用git stash
2. 跳转到master分支上,创建一个新的临时的分支来进行bug修改,修改完成后我们提交上去并合并就可以了.
3. 我们怎么回复之前在dev中储存的工作呢,两种方法:第一种:git stash apply恢复,但是恢复后,stash内容没有删除,需要执行git stash drop来进行删除.第二种:直接使用git stash pop进行恢复和删除.
4. 使用git stash list 来查看stash里面的情况



多人协作
查看远程库信息:git remote -v
本地新建的分支如果不推送是看不见的
从本地推送分支,使用git push origin branch-name,如果推送失败,先用git pull抓取远程的新提交
在本地创建和远程分支对应的分支,使用git checkout -b dev origin/dev
建立本地分支和远程分支的关联,使用git checkout --set-upstream branch-name origin/branch-name
从远程抓取分支,使用git pull.



创建标签:
使用命令git tag <tagname>来新建一个标签,默认是HEAD,也可以指定commit id,
使用git tag -a<tagname> -m "describe"可以制定标签信息
命令git tag可以查看标签信息
命令git show <tagname>查看某个tag信息


操作标签
git push origin <tagname>推送一个tag到远程
git push origin --tags推送本地全部的tag到远程
git tag -d <tagname> 删除本地的一个tag
git push origin :refs/tags/<tagname> 可以删除一个远程的tag,但是删除远程的前提是必须删除本地的相应tag
